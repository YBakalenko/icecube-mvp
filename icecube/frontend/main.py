"""
–ü—Ä–æ–≥—Ä–∞–º–º–∞: Frontend —á–∞—Å—Ç—å –ø—Ä–æ–µ–∫—Ç–∞
–í–µ—Ä—Å–∏—è: 0.3.1
"""
#import time
#import prometheus_client as pc
import socket
import streamlit as st
from random import sample
from src.data.get_data import load_data
from src.data.requester import http_request, request_dataset, check_backend_health
from src.evaluate.evaluate import evaluate_input, evaluate_from_file
from src.plotting.charts import sensors_3d, plot_meta, plot_charge_hist, barplot_aux, histplot_time, event_plot
from src.train.training import start_train


# def is_port_in_use(port):
#     """
#     –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–≥–æ, —á—Ç–æ Prometheus HTTP Server —É–∂–µ –∑–∞–ø—É—â–µ–Ω
#     :param port: –Ω–æ–º–µ—Ä –ø–æ—Ä—Ç–∞
#     :retun: –ø–æ—Ä—Ç –∑–∞–Ω—è—Ç
#     """
#     with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
#         return sock.connect_ex(('localhost', port)) == 0


# Start Prometheus HTTP server
# prometheus_port = 9501
# print(f'Attempting to start Prometheus HTTP server')
# if not is_port_in_use(prometheus_port):
#     pc.start_http_server(prometheus_port)
#     print(f'Prometheus HTTP server started at port {prometheus_port}')


def main_page():
    """
    –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–µ–∫—Ç–∞
    """
    st.markdown("# –û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞")
    st.title("IceCube - Neutrinos in Deep Ice ‚ùÑÔ∏èüí´")
    check_backend_health('train')
    check_backend_health('predict')
    st.markdown(
        """
        <b>IceCube</b> ‚Äî –Ω–µ–π—Ç—Ä–∏–Ω–Ω–∞—è –æ–±—Å–µ—Ä–≤–∞—Ç–æ—Ä–∏—è, –ø–æ—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –Ω–∞ –∞–Ω—Ç–∞—Ä–∫—Ç–∏—á–µ—Å–∫–æ–π —Å—Ç–∞–Ω—Ü–∏–∏ –ê–º—É–Ω–¥—Å–µ–Ω-–°–∫–æ—Ç—Ç.
        IceCube —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –≥–ª—É–±–æ–∫–æ –≤ —Ç–æ–ª—â–µ –∞–Ω—Ç–∞—Ä–∫—Ç–∏—á–µ—Å–∫–æ–≥–æ –ª—å–¥–∞. –ù–∞ –≥–ª—É–±–∏–Ω–µ –æ—Ç 1450 –¥–æ 2450 –º –ø–æ–º–µ—â–µ–Ω—ã –ø—Ä–æ—á–Ω—ã–µ ¬´–Ω–∏—Ç–∏¬ª
        —Å –ø—Ä–∏–∫—Ä–µ–ø–ª—ë–Ω–Ω—ã–º–∏ –æ–ø—Ç–∏—á–µ—Å–∫–∏–º–∏ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞–º–∏ (—Ñ–æ—Ç–æ—É–º–Ω–æ–∂–∏—Ç–µ–ª—è–º–∏). –ö–∞–∂–¥–∞—è ¬´–Ω–∏—Ç—å¬ª –∏–º–µ–µ—Ç 60 —Ñ–æ—Ç–æ—É–º–Ω–æ–∂–∏—Ç–µ–ª–µ–π - –≤—Å–µ–≥–æ
        5160 —Å–µ–Ω—Å–æ—Ä–æ–≤. –û–ø—Ç–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–∑–ª—É—á–µ–Ω–∏–µ –º—é–æ–Ω–æ–≤ –≤—ã—Å–æ–∫–æ–π —ç–Ω–µ—Ä–≥–∏–∏, –¥–≤–∏–∂—É—â–∏—Ö—Å—è –≤ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤–≤–µ—Ä—Ö
        (—Ç–æ –µ—Å—Ç—å –∏–∑-–ø–æ–¥ –∑–µ–º–ª–∏). –≠—Ç–∏ –º—é–æ–Ω—ã –º–æ–≥—É—Ç —Ä–æ–∂–¥–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ –º—é–æ–Ω–Ω—ã—Ö –Ω–µ–π—Ç—Ä–∏–Ω–æ, –ø—Ä–æ—à–µ–¥—à–∏—Ö —Å–∫–≤–æ–∑—å
        –ó–µ–º–ª—é, —Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–∞–º–∏ –∏ –Ω—É–∫–ª–æ–Ω–∞–º–∏ –ª—å–¥–∞ (–∏ —Å–ª–æ—è –≥—Ä—É–Ω—Ç–∞ –ø–æ–¥–æ –ª—å–¥–æ–º, —Ç–æ–ª—â–∏–Ω–æ–π –ø–æ—Ä—è–¥–∫–∞ 1 –∫–º).<br><br>
        """,
        unsafe_allow_html=True
    )
    st.image(
        "https://storage.googleapis.com/kaggle-media/competitions/IceCube/icecube_detector.jpg",
        width=600,
    )
    st.markdown(
        """
        –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, —Å –∫–∞–∫–æ–≥–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏—à–ª–∏ –Ω–µ–π—Ç—Ä–∏–Ω–æ, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –Ω–µ–π—Ç—Ä–∏–Ω–Ω–æ–π –æ–±—Å–µ—Ä–≤–∞—Ç–æ—Ä–∏–µ–π IceCube
        –Ω–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ—Ç —Ñ–æ—Ç–æ–¥–µ—Ç–µ–∫—Ç–æ—Ä–æ–≤, –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–≤—à–∏—Ö –∏–∑–ª—É—á–µ–Ω–∏–µ. –í –∫–∞—á–µ—Å—Ç–≤–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–º–µ—é—Ç—Å—è
        –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ñ–æ—Ç–æ–¥–∞—Ç—á–∏–∫–æ–≤ –æ–±—Å–µ—Ä–≤–∞—Ç–æ—Ä–∏–∏ (<b>sensor_geometry.csv</b>), —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ—à–ª—ã—Ö –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π —Å —Ä–∞—Å—á–µ—Ç–æ–º
        —Å—Ñ–µ—Ä–∏—á–µ—Å–∫–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤–µ–∫—Ç–æ—Ä–æ–≤ –¥–≤–∏–∂–µ–Ω–∏—è –Ω–µ–π—Ç—Ä–∏–Ω–æ (<b>train_meta.parquet, batch_N.parquet</b>)
        """,
        unsafe_allow_html=True
    )
    with st.expander('–û–ø–∏—Å–∞–Ω–∏–µ –∏—Å—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö'):
        st.markdown(
            """
            <b>–î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:</b></br>
            <u><b>sensor_geometry.csv</b></u> - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ —Ñ–æ—Ç–æ–¥–∞—Ç—á–∏–∫–æ–≤ –æ–±—Å–µ—Ä–≤–∞—Ç–æ—Ä–∏–∏:<br>
            <ul>
                <li><b>sensor_id</b> - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–æ—Ç–æ–¥–∞—Ç—á–∏–∫–∞</li>
                <li><b>x, y, z</b> - –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ñ–æ—Ç–æ–¥–∞—Ç—á–∏–∫–æ–≤ –≤ –¥–µ–∫–∞—Ä—Ç–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–µ –≤ –º–µ—Ç—Ä–∞—Ö</li>
            </ul>
            <u><b>batch_N.parquet</b></u> - –Ω–∞–±–ª—é–¥–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—è–º–∏ —Ñ–∏–∫—Å–∞—Ü–∏–π –ª—É—á–µ–π –Ω–µ–π—Ç—Ä–∏–Ω–æ —Ñ–æ—Ç–æ–¥–∞—Ç—á–∏–∫–∞–º–∏,
            –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–µ –≤ –ø–∞–∫–µ—Ç–Ω—ã–µ –¥–∞—Ç–∞—Å–µ—Ç—ã (batch). N ‚àà [1, 660]:<br>
            <ul>
                <li><b>event_id</b> - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è. –í –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤—Ö–æ–¥–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –ø–æ —á–∏—Å–ª—É
                —Ñ–æ—Ç–æ–¥–∞—Ç—á–∏–∫–æ–≤, –æ–±–Ω–∞—Ä—É–∂–∏–≤—à–∏—Ö –∏–∑–ª—É—á–µ–Ω–∏–µ </li>
                <li><b>sensor_id</b> - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–æ—Ç–æ–¥–∞—Ç—á–∏–∫–∞, –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–≤—à–µ–≥–æ –∏–∑–ª—É—á–µ–Ω–∏–µ (–∏–º–ø—É–ª—å—Å)</li>
                <li><b>time</b> - –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏–º–ø—É–ª—å—Å–∞ –≤ –Ω–∞–Ω–æ—Å–µ–∫—É–Ω–¥–∞—Ö –≤ —Ä–∞–º–∫–∞—Ö —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
                (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è)</li>
                <li><b>charge</b> - –≤–µ–ª–∏—á–∏–Ω–∞ –∏–º–ø—É–ª—å—Å–∞ –Ω–µ–π—Ç—Ä–∏–Ω–æ</li>
                <li><b>auxiliary</b> - —Ñ–ª–∞–≥ —Ç–æ–≥–æ, —á—Ç–æ –∏–∑–º–µ—Ä–µ–Ω–∏–µ –Ω–µ –±—ã–ª–æ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ü–∏—Ñ—Ä–æ–≤–∞–Ω–æ –∏ –∏–º–µ–µ—Ç –Ω–∏–∑–∫–æ–µ
                –∫–∞—á–µ—Å—Ç–≤–æ –∏–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à—É–º—É</li>
            </ul>
            <u><b>train_meta.parquet</b></u> / <u><b>test_meta.parquet</b></u> - —Å–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –Ω–∞–±–ª—é–¥–µ–Ω–∏–π,
            –∫–∞–∂–¥–∞—è —Å—Ç—Ä–æ–∫–∞ –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –æ–¥–Ω–æ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∏–∑ –¥–∞—Ç–∞—Å–µ—Ç–æ–≤ <b>batch_N.parquet</b> —Å —Ä–∞—Å—á–µ—Ç–æ–º
            –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ª—É—á–∞ –Ω–µ–π—Ç—Ä–∏–Ω–æ:<br>
            <ul>
                <li><b>batch_id</b> - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–∞–∫–µ—Ç–∞ —Å–æ–±—ã—Ç–∏–π. –°–æ–æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Å –Ω–æ–º–µ—Ä–æ–º <b>N</b> —Ñ–∞–π–ª–æ–≤
                <b>batch_N.parquet</b></li>
                <li><b>event_id</b> - –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è. –í –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤—Ö–æ–¥–∏—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ –ø–æ —á–∏—Å–ª—É
                —Ñ–æ—Ç–æ–¥–∞—Ç—á–∏–∫–æ–≤, –æ–±–Ω–∞—Ä—É–∂–∏–≤—à–∏—Ö –∏–∑–ª—É—á–µ–Ω–∏–µ </li>
                <li><b>first_pulse_index</b> - —Å–∫–≤–æ–∑–Ω–æ–π –Ω–æ–º–µ—Ä –ø–µ—Ä–≤–æ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏ –∏–∑–ª—É—á–µ–Ω–∏—è –Ω–µ–π—Ç—Ä–∏–Ω–æ (–∏–º–ø—É–ª—å—Å)
                –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è <b>(event_id)</b></li>
                <li><b>last_pulse_index</b> - —Å–∫–≤–æ–∑–Ω–æ–π –Ω–æ–º–µ—Ä –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ñ–∏–∫—Å–∞—Ü–∏–∏ –∏–∑–ª—É—á–µ–Ω–∏—è –Ω–µ–π—Ç—Ä–∏–Ω–æ (–∏–º–ø—É–ª—å—Å)
                –≤ —Ä–∞–º–∫–∞—Ö –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è <b>(event_id)</b></li>
                <li><b>azimuth (ùúô)</b> - —Ä–∞—Å—á–µ—Ç–Ω—ã–π —É–≥–æ–ª –∞–∑–∏–º—É—Ç–∞ –ª—É—á–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–µ–π—Ç—Ä–∏–Ω–æ –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö [0, 2ùúã],
                –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ <b>test_meta.parquet</b></li>
                <li><b>zenith (ùúÉ)</b> - —Ä–∞—Å—á–µ—Ç–Ω—ã–π —É–≥–æ–ª –∑–µ–Ω–∏—Ç–∞ –ª—É—á–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–µ–π—Ç—Ä–∏–Ω–æ –≤ —Ä–∞–¥–∏–∞–Ω–∞—Ö [0, ùúã],
                –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ <b>test_meta.parquet</b></li>

            <b>azimuth, zenith</b> - —Ü–µ–ª–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            """,
            unsafe_allow_html=True
        )
        st.markdown(
            """
            <b>–î–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∞:</b></br>
            <u><b>batch_661.parquet</b></u> - –ø–∞–∫–µ—Ç —Å–æ–±—ã—Ç–∏–π ‚Ññ 661 - —Ç–µ—Å—Ç–æ–≤—ã–π, —Ñ–æ—Ä–º–∞—Ç –∞–Ω–∞–ª–æ–≥–∏—á–µ–Ω
            –ø—Ä–µ–¥—ã–¥—É—â–∏–º –¥–∞—Ç–∞—Å–µ—Ç–∞–º.
            –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –≤ <b>test_meta.parquet</b>
            """,
            unsafe_allow_html=True
        )


@st.cache_data(show_spinner=False)
def data_loader():
    """
    –ó–∞–≥—Ä—É–∑–∫–∞ –≤ –ø–∞–º—è—Ç—å –¥–∞—Ç–∞—Ñ—Ä–µ–π–º–æ–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∏ –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –æ–ø—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∏—Ç–µ–π
    :return: –≥–µ–æ–º–µ—Ç—Ä–∏–∏ –æ–ø—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∏—Ç–µ–π, –¥–∞—Ç–∞—Ñ—Ä–µ–π–º—ã –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, –±–∞—Ç—á-–¥–∞–Ω–Ω—ã—Ö –∏ —Å–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ —Å–æ–±—ã—Ç–∏–π
    """
    datasets = ['sensor_geometry', 'train_meta_sample', 'train_batches_sample']
    dfs = []
    download_bar = st.progress(0, text='–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö...')

    for i in range(len(datasets)):
        # load datasets
        download_bar.progress(i/len(datasets), text=f'–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö... {datasets[i]}')
        dfs.append(request_dataset(datasets[i]))

    download_bar.progress(100, '–ó–∞–≥—Ä—É–∑–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞')

    return dfs


def exploratory():
    """
    Exploratory data analysis
    """
    st.markdown('# Exploratory data analysis')
    train_healthy = check_backend_health('train')
    if train_healthy:
        sensor_geometry, train_meta_sample, batches_sample = data_loader()
        event_ids = sorted(sample(list(set(batches_sample.index)), 100))
        st.write(f'Batch data:')
        st.write(batches_sample.head())
        st.write('Train meta')
        st.write(train_meta_sample.head())
        st.write('Sensor geometry')
        st.write(sensor_geometry.head())

        # plotting with checkbox
        sensors_3d_cb = st.sidebar.checkbox('–ì–µ–æ–º–µ—Ç—Ä–∏—è –æ–ø—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∏—Ç–µ–π IceCube')
        plot_meta_cb = st.sidebar.checkbox('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ª—É—á–µ–π –Ω–µ–π—Ç—Ä–∏–Ω–æ')
        plot_charge_hist_cb = st.sidebar.checkbox('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤–µ–ª–∏—á–∏–Ω –∏–º–ø—É–ª—å—Å–æ–≤ –Ω–µ–π—Ç—Ä–∏–Ω–æ')
        barplot_aux_cb = st.sidebar.checkbox('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–º–ø—É–ª—å—Å–æ–≤ —Å –ø—Ä–∏–∑–Ω–∞–∫–æ–º auxiliary')
        histplot_time_cb = st.sidebar.checkbox('–ü—Ä–∏–∑–Ω–∞–∫ auxiliary - –≤–µ–ª–∏—á–∏–Ω–∞ –∏–º–ø—É–ª—å—Å–æ–≤')
        event_plot_cb = st.sidebar.checkbox('3D-–≥—Ä–∞—Ñ–∏–∫ –∏–º–ø—É–ª—å—Å–æ–≤ –∏ —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ –≤–µ–∫—Ç–æ—Ä–∞ —Å–æ–±—ã—Ç–∏—è')

        if sensors_3d_cb:
            st.plotly_chart(
                sensors_3d(
                    sensor_geometry=sensor_geometry
                )
            )
        if plot_meta_cb:
            st.pyplot(
                plot_meta(
                    train_meta=train_meta_sample
                )
            )
        if plot_charge_hist_cb:
            st.pyplot(
                plot_charge_hist(
                    batch_df=batches_sample
                )
            )
        if barplot_aux_cb:
            st.pyplot(
                barplot_aux(
                    batch_df=batches_sample
                )
            )
        if histplot_time_cb:
            st.pyplot(
                histplot_time(
                    batch_df=batches_sample
                )
            )
        if event_plot_cb:
            event_id = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ event_id', event_ids)
            st.plotly_chart(
                event_plot(
                    event_id=event_id,
                    batch_data=batches_sample,
                    sensor_geometry=sensor_geometry,
                    train_meta=train_meta_sample
                )
            )


def train():
    """
    –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –º–æ–¥–µ–ª–∏
    """
    st.markdown('# Train model CatBoost')
    train_healthy = check_backend_health('train')
    if train_healthy:
        if st.button('Start training'):
            start_train()


def prediction():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –ø—É—Ç–µ–º –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
    """
    st.markdown('# Prediction')
    predict_healthy = check_backend_health('predict')
    if predict_healthy:
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
        response = http_request(kind='get', service='verify')
        is_model_trained = bool(response.json()['result'])
        if is_model_trained:
            evaluate_input()
        else:
            st.error('–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å')


def prediction_from_file():
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞ —Å –¥–∞–Ω–Ω—ã–º–∏
    """
    st.markdown('# Prediction')
    predict_healthy = check_backend_health('predict')
    if predict_healthy:
        upload_file = st.file_uploader(label='Upload a test file',
                                       type=['parquet'],
                                       accept_multiple_files=False)
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —Ñ–∞–π–ª
        if upload_file:
            with st.spinner('–ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞—Ç–∞—Ñ—Ä–µ–π–º...'):
                dataset_df, files = load_data(data_path=upload_file, data_type='Test')
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
            response = http_request(kind='get', service='verify')
            is_model_trained = bool(response.json()['result'])
            if is_model_trained:
                evaluate_from_file(files=files)
            else:
                st.error('–°–Ω–∞—á–∞–ª–∞ –æ–±—É—á–∏—Ç–µ –º–æ–¥–µ–ª—å')


def main():
    """
    –°–±–æ—Ä–∫–∞ –ø–∞–π–ø–ª–∞–π–Ω–∞ –≤ –æ–¥–Ω–æ–º –±–ª–æ–∫–µ
    """
    st.set_page_config(page_title='IceCube neutrinos', page_icon='‚ùÑÔ∏è')
    page_names_to_funcs = {
        'Project description': main_page,
        'Exploratory data analysis': exploratory,
        'Training model': train,
        'Prediction from file': prediction_from_file,
        'Prediction': prediction,
    }
    st.sidebar.caption(f'Hostname: {socket.gethostname()}')
    selected_page = st.sidebar.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç', page_names_to_funcs.keys())
    page_names_to_funcs[selected_page]()
    # REQUEST_COUNT.inc()


if __name__ == '__main__':
    main()
